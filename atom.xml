<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://DreamFish12450.github.io</id>
    <title>DreamFish</title>
    <updated>2020-04-26T09:34:03.151Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://DreamFish12450.github.io"/>
    <link rel="self" href="https://DreamFish12450.github.io/atom.xml"/>
    <subtitle>摸鱼（记仇）日记</subtitle>
    <logo>https://DreamFish12450.github.io/images/avatar.png</logo>
    <icon>https://DreamFish12450.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, DreamFish</rights>
    <entry>
        <title type="html"><![CDATA[val(),text(）,html()和一些简单的jquery选择器]]></title>
        <id>https://DreamFish12450.github.io/post/xuanZeQi/</id>
        <link href="https://DreamFish12450.github.io/post/xuanZeQi/">
        </link>
        <updated>2020-04-13T13:53:33.000Z</updated>
        <content type="html"><![CDATA[<h1 id="valtexthtml和一些简单的css选择器">val(),text(）,html()和一些简单的css选择器</h1>
<p><img src="https://i.loli.net/2020/04/26/en7MmxUCy64GjNL.jpg" alt="laopo" loading="lazy"><br><br>
<br>我们先刚刚<code>html()</code>和<code>text()</code>的区别;<br><br>
<a href="https://www.jquery123.com/text/">.text()</a>方法得到匹配集合元素中的每个元素<br><br>
<a href="https://www.jquery123.com/html/">.html()</a>只能得到匹配集合元素中的第一个元素的HTML内容<br><br>
下面我们先来直观的观看.html()和.text()的实例<br></p>
<p><img src="https://i.loli.net/2020/04/26/vD2YebCfTULwZsi.png" alt="exam1" loading="lazy"><br></p>
<p>显然的可以看出,其中一个返回的是文本内容另一个</p>
<p>返回的是一个HTML的文本<br><br>
那么其中的text()中的<code>每个元素</code>和<code>html()</code>中的第一个元素又怎么进行理解呢?<br>
还是看个例子</p>
<pre><code>&lt;body&gt;
    &lt;p&gt;&lt;b&gt;Test&lt;/b&gt; Paragraph.&lt;/p&gt;
    &lt;p&gt;&lt;b&gt;Test2&lt;/b&gt; Paragraph2.&lt;/p&gt;
&lt;/body&gt;
&lt;script&gt;
    console.log($(&quot;p&quot;).html());
    console.log($(&quot;p&quot;).text());
&lt;/script&gt;
</code></pre>
<p>他的结果则如下所示</p>
<pre><code>&lt;b&gt;Test&lt;/b&gt; Paragraph.
Test Paragraph.Test2 Paragraph2.
</code></pre>
<p>可以很明显的看出.text()方法得到匹配集合元素中的每个元素，<br>
而HTML只能得到匹配集合元素中的第一个元素的HTML内容<br><br>
再来点骚操作(改自官方文档的例子)<br></p>
<p><img src="https://i.loli.net/2020/04/26/vD2YebCfTULwZsi.png" alt="exam2" loading="lazy"><br><br>
这里使用了子元素选择器（冒号）和包含选择器（空格）<br>
那么这个加不加空格有啥区别呢<code>p:first</code>代表是选中的是第一个p元素，而<code>p :first</code>则选择的是p元素中的第一个子元素<br><br>
那么问题来了既然.text()是得到匹配元素集合中每个元素的合并文本，包括他们的后代那么$(p :first)为什么只能匹配到的只有test呢 ?<span style ="color:yellow">因为子类选择器只能匹配到一个元素哦</span><br>
<br><br>
<br><br>
与<code>.html(text)</code>可以修改被选择元素的html内容相同，<code>.text(text)</code>也可以修改被选择元素的内容。但是有一点需要注意。在修改时他会调用DOM 方法 <code>.createTextNode()</code>, 一种替代的特殊字符与HTML对应（原来的<code>&lt;</code>会被替换成<code>&amp;lt</code>;）</p>
<p><img src="https://i.loli.net/2020/04/26/vD2YebCfTULwZsi.png" alt="exam3" loading="lazy"><br></p>
<h3 id="港港本篇的第三个主角valbr">港港本篇的第三个主角<code>.val()</code><br></h3>
<p><code>.text()</code> 方法不能使用在 input 元素或scripts元素上。而这时就需要使用 <code>.val()</code> 方法获取或设置文本值。得到scripts元素的值使用<br><br>
那么使用<code>.text()</code>会出现什么呢？啥都不会返回！返回的也不是undefined是一个空值！<br><br>
.val()对一般文本不起作用即使你设置了他的value属性对于表单类的标签如<code>input</code>和<code>select</code> .val()会返回其设置的value属性 若未设置则等同于.text()返回其中的文本<br><br>
同时他也有val(value)这个方法其实用来设置<code>对象的value值</code></p>
<h3 id="港港选择器">港港选择器</h3>
<pre><code>$('select.foo option:selected').val();    // get the value from a dropdown select
$('select.foo').val();                    // get the value from a dropdown select even easier
$('input:checkbox:checked').val();        // get the value from a checked checkbox
$('input:radio[name=bar]:checked').val(); // get the value from a set of radio buttons
</code></pre>
<p>这个是官方文档中所写的就是俺debug了半天猜得到相似的（记仇1/1）<br><br>
再做一点简单的扩展<br>
<br></p>
<pre><code>var radioVal = $(&quot;input[type = 'radio'][name='radioName'][checked = 'checked']&quot;).val();//应该看的懂吧
</code></pre>
<p>还有 就是对以前的api中的@选择器的一个说明这个东西是一个属性选择器现在可以用<code>[attr = ‘attrValue’]</code>来代替,一定要关注这里的是没有<code>空格</code>的</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[THIS FOR JS]]></title>
        <id>https://DreamFish12450.github.io/post/this-for-js/</id>
        <link href="https://DreamFish12450.github.io/post/this-for-js/">
        </link>
        <updated>2020-03-25T12:55:15.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<!-- more -->
<h1 id="js中的-this">JS中的 <code>this</code></h1>
<h1 id="首先要区分js的this和jquery中的this">首先要区分JS的<code>this</code>和jquery中的<code>$(this)</code></h1>
<h1 id="后者是将前者一个js对象包装成jquery对象">后者是将前者（一个JS对象）包装成JQuery对象</h1>
<p>那么如何判断<code>this</code>呢。在网上找到了个<a href="https://cnodejs.org/topic/583d05b727d001d606ac1a54">决策树</a>，感觉挺好的（<s>不是</s>）</p>
<pre><code>    if (this 位于非箭头函数中) {
    if (函数使用 new 调用，即作为构造函数被调用) {  1️⃣

        [this 指向新创建的对象]
    } else if (函数使用 . 调用，即作为对象方法被调用) {2️⃣
        [this 指向 . 之前的对象]
    } else {
        if (严格模式) {3️⃣
        [this 为 undefined]
        } else {
        [this 为 null]
        [但，使用 undefined 或者 null 指定 this 时，this 指向全局对象]
        [this 指向全局对象]
        }
    }
    } else if (this 位于箭头函数中) {4️⃣
    [词法分析时，函数所处作用域的 this]
    } else {
    [this 指向全局对象]
    }
</code></pre>
<h3 id="1️⃣-做一个解释在一般情况下this都是指向全局对象window在浏览器内的-而一般的函数调用方式都是给这个全局对象增加属性">1️⃣ 做一个解释在一般情况下this都是指向全局对象(window在浏览器内)的 而一般的函数调用方式都是给这个全局对象增加属性</h3>
<p>  给个例子:</p>
<pre><code>    function coordinate(x, y){
        this.x = x;
        this.y = y;
    }
    var p1 = new coordinate(2,3)
    console.log(p1)
    //显示 coordinate {x: 2, y: 3}
    var p2 = coordinate(3,4)
    console.log(p2)
    //显示 undefined
</code></pre>
<p>那么这个新的x和y属性去哪里了呢。由前面可知一般情况下或者说,未对this进行指定情况下,其指向全局对象。<br>
  测试一下：</p>
<pre><code>console.log(window.x,window.y)
//显示  3 4
</code></pre>
<h3 id="2️⃣所指的则是一般的对象的方法调用方式如下代码所示">2️⃣所指的则是一般的对象的方法调用方式如下代码所示</h3>
<pre><code>    const obj1 = {
        x: 1,
        y: 1,
        setX(x, y) {
            this.x = x;
            this.y = y;
        }
    }
obj1.setX(3,4)
console.log(obj1)
//打印  {x: 3, y: 4, setX: ƒ}
</code></pre>
<h3 id="3️⃣在严格模式下如果将this指向undefined其指向为undefined若将其指向设置成null其指向即为null-那么后面我们要考虑的是如何改变this的指向是不是可以采用直接赋值的方式-显然并不这是不可行的-this不能在执行期间被赋值-这时候我们考虑使用call方法-代码和打印结果如下">3️⃣在严格模式下如果将this指向undefined其指向为undefined，若将其指向设置成null其指向即为null。那么后面我们要考虑的是如何改变this的指向？是不是可以采用直接赋值的方式。显然（并不）这是不可行的。<code>this</code>不能在执行期间被赋值！！。这时候我们考虑使用<code>call()</code>方法。代码和打印结果如下：</h3>
<pre><code>    function demo1() {
        'use strict';
        return this;
    }
    function demo2() {
        return this;
    }
demo1.call(undefined)
//打印 undefined
demo1.call(null)
//打印 null

</code></pre>
<p>那么如果在<code>非严格模式</code>下会是什么样的呢。</p>
<pre><code>demo2.call(undefined)
//打印 Window {parent: Window, opener: null, top: Window, length: 0, frames: Window, …}
</code></pre>
<p>可以很明显的观察出他的this的指向变成了<code>全局对象</code>。</p>
<h3 id="后面港港如何对this的指向进行改变-一般使用三个函数bindcallapply改变其指向">后面港港如何对<code>this</code>的指向进行改变。一般使用三个函数<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">bind()</a>,<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call">call()</a>,<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply">apply()</a>改变其指向。</h3>
<br>
<p><code>call(thisArg, arg1, arg2, ... )</code><br>
方法使用一个指定的 this 值和单独给出的一个或多个参数来调用一个函数。<br><br>
注意：该方法的语法和作用与 apply() 方法类似，只有一个区别，就是 call() 方法接受的是一个<code>参数列表</code>，而 apply() 方法接受的是一个包含<code>多个参数的数组</code>。（摘自MDN）<br><br>
<code>注：</code>在非严格模式下若thisArg的取值为null或者undefined 会自动变成全局对象；apply也是同样的道理<br><br>
<code>bind(thisArg,arg1 …)</code><br><br>
bind() 方法创建一个新的函数，在 bind() 被调用时，这个新函数的 this 被指定为 bind<br>(thisArg,arg1 …) 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。（摘自MDN）.<br><br>
举一个简单的应用：-------可以将this绑定到thisArg对象上。可以很好的在函数中的变量名与全局中的对象名相同时，选择到对象中的变量名。<br></p>
<pre><code> this.x = 5;
   var obj3 = {
       x: 19,
       getX: function() { return this.x; }
   };
   var unbindX = obj3.getX;
   unbindX();
   //打印的是全局变量x 5
   var bindX = unbindX.bind(obj3);
   //将他绑定对象obj3上。所以他的this也指向了obj3
   bindX();
   //这时候打印19
</code></pre>
<h2 id="4️⃣对于箭头函数中一般不推荐在按钮的绑定事件中使用this指向的基本上都是window对象那么如上文的决策树所说什么是词法分析呢javascript作为函数性编程的语言-其在函数执行前函数块内语句的执行顺序就已经确定-大体顺序如下所示">4️⃣对于箭头函数中，一般不推荐在按钮的绑定事件中使用this指向的基本上都是window对象那么如上文的决策树所说什么是<code>词法分析</code>呢，javascript作为函数性编程的语言。其在函数执行前，函数块内语句的执行顺序就已经确定。大体顺序如下所示</h2>
 <br>
<p><img src="https://DreamFish12450.github.io/post-images/1585145085877.png" alt="" loading="lazy"><br>
<br><br>
需要注意赋值和声明的区别，赋值语句在执行使才会起作用<br>
下面举一个栗子：<br>
<img src="https://DreamFish12450.github.io/post-images/1585145160333.jpg" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[prop()与attr()]]></title>
        <id>https://DreamFish12450.github.io/post/prop/</id>
        <link href="https://DreamFish12450.github.io/post/prop/">
        </link>
        <updated>2019-01-25T11:09:48.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<p><code>attr(key)</code> 获取属性其一般用于检索HTML对象的属性</p>
<p><code>attr(key, value)</code>设置属性<br><br>
<code>prop（）</code>属性操作的是JS对象其一般用来获取对象的属性<br><br>
来自菜鸟教程对于prop（）方法的解释<br><br>
返回属性的值：<br><br>
<code>$(selector).prop(property)</code></p>
<p>设置属性和值：</p>
<p><code>$(selector).prop(property,value)</code></p>
<p>使用函数设置属性和值：</p>
<p><code>$(selector).prop(property,function(index,currentvalue))</code></p>
<p>设置多个属性和值：<br>
<code>$(selector).prop({property:value, property:value,...})</code><br>
对第三个做一个简单的解释：使用其去对复选框进行全选<br></p>
<pre><code>&lt;body&gt;
    &lt;input type=&quot;checkbox&quot; value=&quot;basektball&quot; name=&quot;hobby&quot;&gt;篮球
    &lt;input type=&quot;checkbox&quot; value=&quot;footerball&quot; name=&quot;hobby&quot;&gt;足球
    &lt;input type=&quot;checkbox&quot; value=&quot;writing&quot; checked=&quot;checked&quot; name=&quot;hobby&quot;&gt;书法
    &lt;input type=&quot;checkbox&quot; value=&quot;music&quot; name=&quot;hobby&quot;&gt;音乐
    &lt;br&gt;
    &lt;input type=&quot;checkbox&quot; value=&quot;paint&quot; name=&quot;hobby&quot;&gt;绘画
    &lt;input type=&quot;checkbox&quot; value=&quot;box&quot; name=&quot;hobby&quot;&gt;散打
    &lt;input type=&quot;checkbox&quot; value=&quot;yoga&quot; checked=&quot;checked&quot; name=&quot;hobby&quot;&gt;瑜伽
    &lt;input type=&quot;checkbox&quot; value=&quot;another&quot; name=&quot;hobby&quot;&gt;其他
    &lt;button onclick=&quot; return check()&quot;&gt;111111111&lt;/button&gt;

&lt;/body&gt;
&lt;script&gt;
    check = () =&gt; {
        $(&quot;[name = 'hobby']&quot;).prop('checked', (index,currenValue) =&gt; {
            console.log($($(&quot;[name = 'hobby']&quot;)[index]).prop('checked', true));
            // 第一个通过Index获取到的是DOM对象，因为prop方法是jquery对象的专有，所以需要用jquery运算符将其转换为jquery对象
        })
    };
&lt;/script&gt;
</code></pre>
]]></content>
    </entry>
</feed>